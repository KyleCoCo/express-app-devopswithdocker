name: Connect to an AWS role from a GitHub repository

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches:
      - master
  pull_request:
    branches: [ master ]

env:
  AWS_REGION : us-east-1
  INSTANCE_ID: i-02a523784e17a1cb1

# Permission can be added at job level or workflow level
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  AssumeRoleAndCallIdentity:
    runs-on: ubuntu-latest
    steps:
      # - name: Git clone the repository
      #   uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::060795931006:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::060795931006:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Run deployment on EC2 via SSM and check result
        run: |
          set -e  # fail fast on error

          # Step 1: Send command
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --comment "Deploy app on ubuntu" \
            --parameters 'commands=["sudo su - ubuntu -c '\''cd ~/devops && pm2 stop devops || true && git pull origin master && npm install && pm2 start index.js --name devops'\''"]' \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "Command sent: $COMMAND_ID"

          # Step 2: Wait for command to complete
          STATUS="InProgress"
          while [[ "$STATUS" == "InProgress" || "$STATUS" == "Pending" ]]; do
            sleep 2
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ env.INSTANCE_ID }} \
              --region ${{ env.AWS_REGION }} \
              --query "Status" \
              --output text)
            echo "Waiting... Current status: $STATUS"
          done

          # Step 3: Check result
          if [[ "$STATUS" != "Success" ]]; then
            echo "SSM command failed with status: $STATUS"
            exit 1
          fi

          echo "SSM command completed successfully!"
      
